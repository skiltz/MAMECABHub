/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef core_TYPES_H
#define core_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _PlayerStatus__isset {
  _PlayerStatus__isset() : name(false) {}
  bool name;
} _PlayerStatus__isset;

class PlayerStatus {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  PlayerStatus() : name() {
  }

  virtual ~PlayerStatus() throw() {}

  std::string name;

  _PlayerStatus__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const PlayerStatus & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const PlayerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayerStatus &a, PlayerStatus &b);

typedef struct _Status__isset {
  _Status__isset() : playerStatus(true) {}
  bool playerStatus;
} _Status__isset;

class Status {
 public:

  static const char* ascii_fingerprint; // = "A77A984AB7ADD4302853C1A113A5A67B";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x7A,0x98,0x4A,0xB7,0xAD,0xD4,0x30,0x28,0x53,0xC1,0xA1,0x13,0xA5,0xA6,0x7B};

  Status() {

  }

  virtual ~Status() throw() {}

  std::vector<PlayerStatus>  playerStatus;

  _Status__isset __isset;

  void __set_playerStatus(const std::vector<PlayerStatus> & val) {
    playerStatus = val;
  }

  bool operator == (const Status & rhs) const
  {
    if (!(playerStatus == rhs.playerStatus))
      return false;
    return true;
  }
  bool operator != (const Status &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Status & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Status &a, Status &b);



#endif

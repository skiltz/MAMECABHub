/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MameHubRpc_H
#define MameHubRpc_H

#include <thrift/TDispatchProcessor.h>
#include "rpc_types.h"



class MameHubRpcIf {
 public:
  virtual ~MameHubRpcIf() {}
  virtual void getStatus( ::Status& _return) = 0;
};

class MameHubRpcIfFactory {
 public:
  typedef MameHubRpcIf Handler;

  virtual ~MameHubRpcIfFactory() {}

  virtual MameHubRpcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MameHubRpcIf* /* handler */) = 0;
};

class MameHubRpcIfSingletonFactory : virtual public MameHubRpcIfFactory {
 public:
  MameHubRpcIfSingletonFactory(const boost::shared_ptr<MameHubRpcIf>& iface) : iface_(iface) {}
  virtual ~MameHubRpcIfSingletonFactory() {}

  virtual MameHubRpcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MameHubRpcIf* /* handler */) {}

 protected:
  boost::shared_ptr<MameHubRpcIf> iface_;
};

class MameHubRpcNull : virtual public MameHubRpcIf {
 public:
  virtual ~MameHubRpcNull() {}
  void getStatus( ::Status& /* _return */) {
    return;
  }
};


class MameHubRpc_getStatus_args {
 public:

  MameHubRpc_getStatus_args() {
  }

  virtual ~MameHubRpc_getStatus_args() throw() {}


  bool operator == (const MameHubRpc_getStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MameHubRpc_getStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MameHubRpc_getStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MameHubRpc_getStatus_pargs {
 public:


  virtual ~MameHubRpc_getStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MameHubRpc_getStatus_result__isset {
  _MameHubRpc_getStatus_result__isset() : success(false) {}
  bool success;
} _MameHubRpc_getStatus_result__isset;

class MameHubRpc_getStatus_result {
 public:

  MameHubRpc_getStatus_result() {
  }

  virtual ~MameHubRpc_getStatus_result() throw() {}

   ::Status success;

  _MameHubRpc_getStatus_result__isset __isset;

  void __set_success(const  ::Status& val) {
    success = val;
  }

  bool operator == (const MameHubRpc_getStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MameHubRpc_getStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MameHubRpc_getStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MameHubRpc_getStatus_presult__isset {
  _MameHubRpc_getStatus_presult__isset() : success(false) {}
  bool success;
} _MameHubRpc_getStatus_presult__isset;

class MameHubRpc_getStatus_presult {
 public:


  virtual ~MameHubRpc_getStatus_presult() throw() {}

   ::Status* success;

  _MameHubRpc_getStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MameHubRpcClient : virtual public MameHubRpcIf {
 public:
  MameHubRpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MameHubRpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getStatus( ::Status& _return);
  void send_getStatus();
  void recv_getStatus( ::Status& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MameHubRpcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MameHubRpcIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MameHubRpcProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MameHubRpcProcessor(boost::shared_ptr<MameHubRpcIf> iface) :
    iface_(iface) {
    processMap_["getStatus"] = &MameHubRpcProcessor::process_getStatus;
  }

  virtual ~MameHubRpcProcessor() {}
};

class MameHubRpcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MameHubRpcProcessorFactory(const ::boost::shared_ptr< MameHubRpcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MameHubRpcIfFactory > handlerFactory_;
};

class MameHubRpcMultiface : virtual public MameHubRpcIf {
 public:
  MameHubRpcMultiface(std::vector<boost::shared_ptr<MameHubRpcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MameHubRpcMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MameHubRpcIf> > ifaces_;
  MameHubRpcMultiface() {}
  void add(boost::shared_ptr<MameHubRpcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getStatus( ::Status& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatus(_return);
    }
    ifaces_[i]->getStatus(_return);
    return;
  }

};



#endif
